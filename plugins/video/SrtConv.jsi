#!/usr/bin/env jsish
// Based on: https://github.com/silviapfeiffer/silviapfeiffer.github.io/blob/master/index.html

function SrtConv(args:array|string=void, conf:object=void) {
    var options = { // Convert a subtitles .srt file to .vtt
        rootdir     :'',     // Root directory.
        O           :'',     // Output file or stdout if '-' (rootname+'.vtt').
    };
    var self = {
    };
    parseOpts(self, options, conf);
    
    function main() {
        LogTest('Starting', args);
        args = Util.argArray(args);
        if (self.rootdir === '')
            self.rootdir=Info.scriptDir();
        debugger;
        if (args.length !== 1 || !File.exists(args[0]) || File.extension(args[0]) != '.srt')
            throw('expected .srt file arg');
        var data = File.read(args[0]);
        if (data[0] == '\ufeff')
            data = data.slice(1);

        function convertSrtCue(caption:string) {
            // remove all html tags for security reasons
            //srt = srt.replace(/<[a-zA-Z\/][^>]*>/g, '');
            var cue = "";
            var s = caption.split('\n');
            // concatenate muilt-line string separated in array into one
            while (s.length > 3) {
                for (var i = 3; i < s.length; i++) {
                    s[2] += "\n" + s[i];
                }
                s.splice(3, s.length - 3);
            }
            var line = 0;
            // detect identifier
            s[0] = s[0].trim();
            if (s[0].match(/^[0-9]+$/)) 
            {
                cue += s[0] + "\n";
                line += 1;
            }
            // get time strings
            if (s[line].match(/[0-9]+:[0-9]+:[0-9]+/)) {
            // convert time string
                var m = s[1].match(/([0-9]+):([0-9]+):([0-9]+),([0-9]+)\s*-->\s*([0-9]+):([0-9]+):([0-9]+),([0-9]+)/);
                if (m) {
                    cue += m[1]+":"+m[2]+":"+m[3]+"."+m[4]+" --> "
                        +m[5]+":"+m[6]+":"+m[7]+"."+m[8]+"\n";
                    line += 1;
                } else {
                    // Unrecognized timestring
                    return "";
                }
            } else {
                LogWarn("format error");
                // file format error or comment lines
                return "";
            }
            // get cue text
            if (s[line]) {
                cue += s[line] + "\n\n";
            }
            return cue;
        }
        
        var srt = data.map(['\r', '']);
        srt = srt.replace(/^\s+|\s+$/g, '');
        // get cues
        var cuelist = srt.split('\n\n');
        var result = "";
        if (cuelist.length > 0) {
            result += "WEBVTT\n\n";
            for (var i = 0; i < cuelist.length; i=i+1) {
                result += convertSrtCue(cuelist[i]);
            }
        }
        LogDebug('Done');
        if (self.O == '-')
            return result;
        if (self.O == '')
            self.O = File.rootname(args[0])+'.vtt';
        File.write(self.O, result);
        return;
    }
    
    return main();
}

provide(SrtConv, 1);

if (isMain()) {
    if (!Interp.conf('unitTest'))
        return runModule(SrtConv);
    
;'  SrtConv unit-test';
;   SrtConv();
;// SrtConv('',{badArg:0});

}

